/*/---------------------------------------------------------/*/
/*/ Craydent LLC node-v0.9.0                                /*/
/*/ Copyright 2011 (http://craydent.com/about)              /*/
/*/ Dual licensed under the MIT or GPL Version 2 licenses.  /*/
/*/ (http://craydent.com/license)                           /*/
/*/---------------------------------------------------------/*/
/*/---------------------------------------------------------/*/
///<reference path="../globalTypes/global.vars.d.ts" />
//#region imports
//@ts-ignore
import { $c, info } from '../private/__common';
import * as ILogModule from '../private/__logModule';
import * as IAwaitable from '../methods/awaitable';
import * as IExt from '../protected/_ext';
import * as IYieldable from '../methods/yieldable';
import * as ISyncroit from '../methods/syncroit';
import * as IParallelEach from '../methods/paralleleach';
import * as IPrototypes from './__prototypes';
//#endregion

//#region typeDefs
declare global {
    interface Craydent {
        parallelEach: typeof IParallelEach.default;
        awaitable: typeof IAwaitable.default;
        syncroit: typeof ISyncroit.default;
        yieldable: typeof IYieldable.default;
    }
    //#region proto
    interface Array<T> {
        parallelEach: typeof IPrototypes._parallelEach;
    }
    module NodeJS {
        interface Global {
            $c: Craydent;
        }
    }
    interface Window {
        $c: Craydent;
    }
    var $c: Craydent;
    //#endregion proto
    //#region global
    module NodeJS {
        interface Global {
            awaitable: typeof IAwaitable.default;
            syncroit: typeof ISyncroit.default;
            yieldable: typeof IYieldable.default;
        }
    }
    interface Window {
        awaitable: typeof IAwaitable.default;
        syncroit: typeof ISyncroit.default;
        yieldable: typeof IYieldable.default;
    }
    var awaitable: typeof IAwaitable.default;
    var syncroit: typeof ISyncroit.default;
    var yieldable: typeof IYieldable.default;
    //#endregion global
}
//#endregion typeDefs
if (!$c.MODULES_LOADED[info.name]) {
    const __logModule: typeof ILogModule.default = require('../private/__logModule').default;
    __logModule(info.name);
    const ext: typeof IExt.default = require('../protected/_ext').default;
    const prototypes: typeof IPrototypes = require('./__prototypes');


    ext(Array, 'parallelEach', prototypes._parallelEach, true);

    $c.awaitable = $c.awaitable || prototypes.awaitable;
    $c.syncroit = $c.syncroit || prototypes.syncroit;
    $c.yieldable = $c.yieldable || prototypes.yieldable;
    //#region global
    $c.globalize();
    //#endregion global
}
export default $c as Craydent;