/*/---------------------------------------------------------/*/
/*/ Craydent LLC node-v0.9.0                                /*/
/*/ Copyright 2011 (http://craydent.com/about)              /*/
/*/ Dual licensed under the MIT or GPL Version 2 licenses.  /*/
/*/ (http://craydent.com/license)                           /*/
/*/---------------------------------------------------------/*/
/*/---------------------------------------------------------/*/
///<reference path="../globalTypes/global.vars.d.ts" />
//#region imports
//@ts-ignore
import { $c, info } from '../private/__common';
import * as ILogModule from '../private/__logModule';
import * as IAcronymize from '../methods/acronymize';
import * as IContains from '../methods/contains';
import * as ICapitalize from '../methods/capitalize';
import * as IConvertUTCDate from '../methods/convertutcdate';
import * as ICount from '../methods/count';
import * as ICut from '../methods/cut';
import * as IEllipsis from '../methods/ellipsis';
import * as IEndItWith from '../methods/enditwith';
import * as IEndsWith from '../methods/endswith';
import * as IEndsWithAny from '../methods/endswithany';
import * as IEquals from '../methods/equals';
import * as IGetValue from '../methods/getvalue';
import * as IHighlight from '../methods/highlight';
import * as IIndexOfAlt from '../methods/indexofalt';
import * as IIreplaceAll from '../methods/ireplaceall';
import * as IIsBlank from '../methods/isblank';
import * as IIsCuid from '../methods/iscuid';
import * as IIsValidEmail from '../methods/isvalidemail';
import * as ILastIndexOfAlt from '../methods/lastindexofalt';
import * as ILtrim from '../methods/ltrim';
import * as IPluralize from '../methods/pluralize';
import * as IRandIndex from '../methods/rand-index';
import * as IReplaceAll from '../methods/replaceall';
import * as IReverse from '../methods/reverse';
import * as IRtrim from '../methods/rtrim';
import * as ISanitize from '../methods/sanitize';
import * as ISingularize from '../methods/singularize';
import * as IStartItWith from '../methods/startitwith';
import * as IStartsWith from '../methods/startswith';
import * as IStartsWithAny from '../methods/startswithany';
import * as IStrip from '../methods/strip';
import * as ISubstringBetween from '../methods/substringbetween';
import * as ISubstringStartFrom from '../methods/substringstartfrom';
import * as ISubstringEndAt from '../methods/substringendat';
import * as IToCurrencyNotation from '../methods/tocurrencynotation';
import * as IToDateTime from '../methods/todatetime';
import * as IToObject from '../methods/toobject';
import * as IUniversalTrim from '../methods/universaltrim';
import * as IExt from '../protected/_ext';
import * as IPrototypes from './__prototypes';
//#endregion

//#region typeDefs
declare global {
    interface Craydent {
        acronymize: typeof IAcronymize.default;
        contains: typeof IContains.default;
        capitalize: typeof ICapitalize.default;
        convertUTCDate: typeof IConvertUTCDate.default;
        count: typeof ICount.default;
        cut: typeof ICut.default;
        ellipsis: typeof IEllipsis.default;
        endItWith: typeof IEndItWith.default;
        endsWith: typeof IEndsWith.default;
        endsWithAny: typeof IEndsWithAny.default;
        equals: typeof IEquals.default;
        getValue: typeof IGetValue.default;
        highlight: typeof IHighlight.default;
        indexOfAlt: typeof IIndexOfAlt.default;
        ireplace_all: typeof IIreplaceAll.default;
        ireplaceAll: typeof IIreplaceAll.default;
        isBlank: typeof IIsBlank.default;
        isCuid: typeof IIsCuid.default;
        isValidEmail: typeof IIsValidEmail.default;
        lastIndexOfAlt: typeof ILastIndexOfAlt.default;
        ltrim: typeof ILtrim.default;
        pluralize: typeof IPluralize.default;
        randomIndex: typeof IRandIndex.default;
        replace_all: typeof IReplaceAll.default;
        replaceAll: typeof IReplaceAll.default;
        reverse: typeof IReverse.default;
        rtrim: typeof IRtrim.default;
        sanitize: typeof ISanitize.default;
        singularize: typeof ISingularize.default;
        startItWith: typeof IStartItWith.default;
        startsWith: typeof IStartsWith.default;
        startsWithAny: typeof IStartsWithAny.default;
        strip: typeof IStrip.default;
        substringBetween: typeof ISubstringBetween.default;
        substringStartFrom: typeof ISubstringStartFrom.default;
        substringEndAt: typeof ISubstringEndAt.default;
        toCurrencyNotation: typeof IToCurrencyNotation.default;
        toDateTime: typeof IToDateTime.default;
        toObject: typeof IToObject.default;
        universalTrim: typeof IUniversalTrim.default;
    }
    //#region proto
    interface String {
        acronymize: typeof IPrototypes._acronymize;
        contains: typeof IPrototypes._contains;
        capitalize: typeof IPrototypes._capitalize;
        convertUTCDate: typeof IPrototypes._convertUTCDate;
        count: typeof IPrototypes._count;
        cut: typeof IPrototypes._cut;
        ellipsis: typeof IPrototypes._ellipsis;
        endItWith: typeof IPrototypes._endItWith;
        endsWithAny: typeof IPrototypes._endsWithAny;
        equals: typeof IPrototypes._equals;
        getValue: typeof IPrototypes._getValue;
        highlight: typeof IPrototypes._highlight;
        indexOfAlt: typeof IPrototypes._indexOfAlt;
        ireplace_all: typeof IPrototypes._ireplaceAll;
        ireplaceAll: typeof IPrototypes._ireplaceAll;
        isBlank: typeof IPrototypes._isBlank;
        isCuid: typeof IPrototypes._isCuid;
        isValidEmail: typeof IPrototypes._isValidEmail;
        lastIndexOfAlt: typeof IPrototypes._lastIndexOfAlt;
        ltrim: typeof IPrototypes._ltrim;
        pluralize: typeof IPrototypes._pluralize;
        randomIndex: typeof IPrototypes._randIndex;
        replace_all: typeof IPrototypes._replaceAll;
        replaceAll: typeof IPrototypes._replaceAll;
        reverse: typeof IPrototypes._reverse;
        rtrim: typeof IPrototypes._rtrim;
        sanitize: typeof IPrototypes._sanitize;
        singularize: typeof IPrototypes._singularize;
        startItWith: typeof IPrototypes._startItWith;
        startsWithAny: typeof IPrototypes._startsWithAny;
        strip: typeof IPrototypes._strip;
        substringBetween: typeof IPrototypes._substringBetween;
        substringStartFrom: typeof IPrototypes._substringStartFrom;
        substringEndAt: typeof IPrototypes._substringEndAt;
        toCurrencyNotation: typeof IPrototypes._toCurrencyNotation;
        toDateTime: typeof IPrototypes._toDateTime;
        toObject: typeof IPrototypes._toObject;
    }
    module NodeJS {
        interface Global {
            $c: Craydent;
        }
    }
    interface Window {
        $c: Craydent;
    }
    var $c: Craydent;
    //#endregion proto
    //#region global
    module NodeJS {
        interface Global {
        }
    }
    interface Window {
    }
    //#endregion global
}
//#endregion typeDefs
if (!$c.MODULES_LOADED[info.name]) {
    const __logModule: typeof ILogModule.default = require('../private/__logModule').default;
    __logModule(info.name);
    const ext: typeof IExt.default = require('../protected/_ext').default;
    const prototypes: typeof IPrototypes = require('./__prototypes');

    ext(String, 'acronymize', prototypes._acronymize, true);
    ext(String, 'capitalize', prototypes._capitalize, true);
    ext(String, "contains", prototypes._contains, true);
    ext(String, 'convertUTCDate', prototypes._convertUTCDate, true);
    ext(String, "count", prototypes._count, true);
    ext(String, 'cut', prototypes._cut, true);
    ext(String, 'ellipsis', prototypes._ellipsis);
    ext(String, 'endItWith', prototypes._endsWithAny);
    ext(String, 'endsWith', prototypes._endsWith);
    ext(String, 'endsWithAny', prototypes._endsWithAny);
    ext(String, "equals", prototypes._equals, true);
    ext(String, "getValue", prototypes._getValue, true);
    ext(String, 'highlight', prototypes._highlight, true);
    ext(String, 'indexOfAlt', prototypes._indexOfAlt, true);
    ext(String, 'ireplace_all', prototypes._ireplaceAll, true);
    ext(String, 'ireplaceAll', prototypes._ireplaceAll, true);
    ext(String, 'isBlank', prototypes._isBlank, true);
    ext(String, 'isCuid', prototypes._isCuid, true);
    ext(String, 'isValidEmail', prototypes._isValidEmail, true);
    ext(String, 'lastIndexOfAlt', prototypes._lastIndexOfAlt, true);
    ext(String, 'ltrim', prototypes._ltrim, true);
    ext(String, 'pluralize', prototypes._pluralize);
    ext(String, 'randIndex', prototypes._randIndex, true);
    ext(String, 'replace_all', prototypes._replaceAll, true);
    ext(String, 'replaceAll', prototypes._replaceAll, true);
    ext(String, 'reverse', prototypes._reverse, true);
    ext(String, 'rtrim', prototypes._rtrim, true);
    ext(String, 'sanitize', prototypes._sanitize, true);
    ext(String, 'singularize', prototypes._singularize);
    ext(String, 'startItWith', prototypes._startItWith);
    ext(String, 'startsWith', prototypes._startsWith);
    ext(String, 'startsWithAny', prototypes._startsWithAny);
    ext(String, 'strip', prototypes._strip, true);
    ext(String, 'substringBetween', prototypes._substringBetween, true);
    ext(String, 'substringStartFrom', prototypes._substringStartFrom, true);
    ext(String, 'substringEndAt', prototypes._substringEndAt, true);
    ext(String, 'toCurrencyNotation', prototypes._toCurrencyNotation, true);
    ext(String, 'toDateTime', prototypes._toDateTime, true);
    ext(String, 'toObject', prototypes._toObject, true);
    ext(String, 'trim', prototypes._trim, true);

    //#region global
    $c.globalize();
    //#endregion global
}
export default $c as Craydent;